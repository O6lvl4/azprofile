#!/bin/bash

# azprofile - Azure CLI Profile Manager
# Version: 2.0.0 (Shell Script Edition)

set -eo pipefail

PROFILES_DIR="$HOME/.azure-profiles"
CONFIG_FILE="$PROFILES_DIR/config"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
GRAY='\033[0;37m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Helper functions
error() {
  echo -e "${RED}❌ $1${NC}" >&2
}

success() {
  echo -e "${GREEN}✅ $1${NC}"
}

info() {
  echo -e "${BLUE}🔄 $1${NC}"
}

warn() {
  echo -e "${YELLOW}$1${NC}"
}

gray() {
  echo -e "${GRAY}$1${NC}"
}

bold() {
  echo -e "${BOLD}$1${NC}"
}

# Ensure profiles directory exists
ensure_profiles_dir() {
  mkdir -p "$PROFILES_DIR"
}

# Load config (simple key=value format instead of JSON)
load_config() {
  if [[ -f "$CONFIG_FILE" ]]; then
    source "$CONFIG_FILE"
  fi
}

# Save config
save_config() {
  ensure_profiles_dir
  cat > "$CONFIG_FILE" << EOF
# azprofile configuration
CURRENT_PROFILE="$CURRENT_PROFILE"
EOF
  
  # Save profile list  
  for profile in $(ls "$PROFILES_DIR" 2>/dev/null | grep -v config || true); do
    if [[ -d "$PROFILES_DIR/$profile" ]]; then
      echo "PROFILE_${profile//-/_}=\"$(date -r "$PROFILES_DIR/$profile" +%Y-%m-%d)\"" >> "$CONFIG_FILE"
    fi
  done
}

# Add new profile
add_profile() {
  local name="$1"
  
  if [[ -z "$name" ]]; then
    error "Profile name required"
    exit 1
  fi
  
  ensure_profiles_dir
  local profile_dir="$PROFILES_DIR/$name"
  
  if [[ -d "$profile_dir" ]]; then
    error "Profile '$name' already exists"
    exit 1
  fi
  
  mkdir -p "$profile_dir"
  load_config
  
  success "Profile '$name' added"
  gray "   Config directory: $profile_dir"
  
  # Ask for initial login
  echo -n "Login to Azure now? (y/N): "
  read -r login
  if [[ "$login" =~ ^[Yy]$ ]]; then
    export AZURE_CONFIG_DIR="$profile_dir"
    az login
  fi
  
  save_config
}

# List profiles
list_profiles() {
  ensure_profiles_dir
  load_config
  
  local profiles=($(ls "$PROFILES_DIR" 2>/dev/null | grep -v config || true))
  
  if [[ ${#profiles[@]} -eq 0 ]]; then
    warn "No profiles found"
    gray "Use: azprofile add <name>"
    return
  fi
  
  bold "Azure Profiles:"
  
  for profile in "${profiles[@]}"; do
    if [[ -d "$PROFILES_DIR/$profile" ]]; then
      local current_marker="  "
      if [[ "${CURRENT_PROFILE:-}" == "$profile" ]]; then
        current_marker="$(echo -e "${GREEN}→${NC} ")"
      fi
      local date_created=$(date -r "$PROFILES_DIR/$profile" +%Y-%m-%d)
      echo -e "${current_marker}$profile $(echo -e "${GRAY}($date_created)${NC}")"
    fi
  done
}

# Switch profile (persistent)
switch_profile() {
  local name="$1"
  
  if [[ -z "$name" ]]; then
    error "Profile name required"
    exit 1
  fi
  
  if [[ ! -d "$PROFILES_DIR/$name" ]]; then
    error "Profile '$name' not found"
    exit 1
  fi
  
  load_config
  CURRENT_PROFILE="$name"
  save_config
  
  info "Switched to profile '$name'"
  gray "   AZURE_CONFIG_DIR=$PROFILES_DIR/$name"
}

# Use profile (for sourcing)
use_profile() {
  local name="$1"
  
  if [[ -z "$name" ]]; then
    error "Profile name required"
    return 1
  fi
  
  if [[ ! -d "$PROFILES_DIR/$name" ]]; then
    error "Profile '$name' not found"
    return 1
  fi
  
  export AZURE_CONFIG_DIR="$PROFILES_DIR/$name"
  load_config
  CURRENT_PROFILE="$name"
  save_config
  
  info "Using profile '$name'"
  gray "   AZURE_CONFIG_DIR=$AZURE_CONFIG_DIR"
}

# Simple wrapper for direct sourcing
azprofile_use() {
  local name="$1"
  if [[ ! -d "$PROFILES_DIR/$name" ]]; then
    error "Profile '$name' not found"
    return 1
  fi
  export AZURE_CONFIG_DIR="$PROFILES_DIR/$name"
  info "Using profile '$name'"
  gray "   AZURE_CONFIG_DIR=$AZURE_CONFIG_DIR"
}

# Current profile status
current_profile() {
  load_config
  
  if [[ -z "${CURRENT_PROFILE:-}" ]]; then
    warn "No profile selected"
    return
  fi
  
  info "Current profile: $CURRENT_PROFILE"
  gray "Config dir: $PROFILES_DIR/$CURRENT_PROFILE"
  
  # Show Azure account info if available
  if [[ -n "${AZURE_CONFIG_DIR:-}" ]] && command -v az >/dev/null 2>&1; then
    echo
    if az account show --query "{name:name, id:id, tenantId:tenantId}" -o table 2>/dev/null; then
      :
    else
      warn "Not logged in to Azure"
    fi
  fi
}

# Remove profile
remove_profile() {
  local name="$1"
  
  if [[ -z "$name" ]]; then
    error "Profile name required"
    exit 1
  fi
  
  if [[ ! -d "$PROFILES_DIR/$name" ]]; then
    error "Profile '$name' not found"
    exit 1
  fi
  
  echo -n "Delete profile '$name'? (y/N): "
  read -r confirm
  if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
    echo "Cancelled"
    return
  fi
  
  rm -rf "$PROFILES_DIR/$name"
  
  load_config
  if [[ "${CURRENT_PROFILE:-}" == "$name" ]]; then
    CURRENT_PROFILE=""
  fi
  save_config
  
  success "Profile '$name' removed"
}

# Execute command with profile
exec_command() {
  local profile_name="$1"
  shift
  
  if [[ -z "$profile_name" ]]; then
    error "Profile name required"
    exit 1
  fi
  
  if [[ ! -d "$PROFILES_DIR/$profile_name" ]]; then
    error "Profile '$profile_name' not found"
    exit 1
  fi
  
  gray "Executing with profile '$profile_name': $*"
  
  export AZURE_CONFIG_DIR="$PROFILES_DIR/$profile_name"
  "$@"
}

# Setup shell integration
setup_shell() {
  local config_file="$1"
  
  if [[ -z "$config_file" ]]; then
    error "Config file path required"
    echo "Usage: azprofile setup ~/.zshrc"
    echo "       azprofile setup ~/.bashrc"
    exit 1
  fi
  
  if [[ ! -f "$config_file" ]]; then
    warn "Config file '$config_file' does not exist. Creating it..."
    touch "$config_file"
  fi
  
  # Check if already installed
  if grep -q "# azprofile integration" "$config_file" 2>/dev/null; then
    warn "azprofile integration already exists in $config_file"
    echo -n "Overwrite? (y/N): "
    read -r confirm
    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
      echo "Setup cancelled"
      return
    fi
    # Remove existing integration
    sed -i.bak '/# azprofile integration/,/# end azprofile integration/d' "$config_file"
  fi
  
  # Add integration
  cat >> "$config_file" << 'EOF'

# azprofile integration
azprofile() {
  local cmd="$1"
  
  if [[ "$cmd" == "use" && -n "$2" ]]; then
    # Special handling for 'use' command to set environment variable directly
    local profile_name="$2"
    if [[ -d "$HOME/.azure-profiles/$profile_name" ]]; then
      export AZURE_CONFIG_DIR="$HOME/.azure-profiles/$profile_name"
      echo -e "\033[0;34m🔄 Using profile '$profile_name'\033[0m"
      echo -e "\033[0;37m   AZURE_CONFIG_DIR=$AZURE_CONFIG_DIR\033[0m"
    else
      echo -e "\033[0;31m❌ Profile '$profile_name' not found\033[0m" >&2
      return 1
    fi
  else
    # Pass through to original azprofile command
    command azprofile "$@"
  fi
}
# end azprofile integration
EOF

  success "azprofile integration added to $config_file"
  info "Available commands after restarting shell:"
  gray "  azprofile use <profile>  - Switch to profile (no source needed!)"
  echo
  warn "Please restart your shell or run: source $config_file"
}

# Show help
show_help() {
  cat << 'EOF'
azprofile - Azure CLI Profile Manager

USAGE:
  azprofile <command> [options]
  source azprofile use <name>    # Recommended for profile switching

COMMANDS:
  add <name>              Add a new profile
  switch <name>           Switch to profile (persistent)
  use <name>              Use profile in current shell (requires source)
  list                    List all profiles
  current                 Show current profile
  remove <name>           Remove profile
  exec <name> -- <cmd>    Execute command with profile
  setup <config-file>     Setup shell integration (e.g., ~/.zshrc)
  help                    Show this help

EXAMPLES:
  azprofile setup ~/.zshrc         # Setup shell integration
  azprofile add work
  azprofile switch personal
  source azprofile use work        # Set env vars in current shell
  az account show                  # Uses work profile
  azprofile exec work -- az account show
  
AFTER SETUP:
  azprofile use work               # Simple profile switching (no source!)
  azprofile list                   # List profiles  
  azprofile add personal           # Add profile

NOTE: Setup shell integration with 'azprofile setup ~/.zshrc' to use 
      'azprofile use <name>' without source command.
EOF
}

# Main function
main() {
  local command="${1:-help}"
  
  case "$command" in
    "add")
      add_profile "${2:-}"
      ;;
    "switch")
      switch_profile "${2:-}"
      ;;
    "use")
      use_profile "${2:-}"
      ;;
    "list")
      list_profiles
      ;;
    "current")
      current_profile
      ;;
    "remove"|"rm")
      remove_profile "${2:-}"
      ;;
    "setup")
      setup_shell "${2:-}"
      ;;
    "exec")
      if [[ $# -lt 3 ]] || [[ "$3" != "--" ]]; then
        error "Usage: azprofile exec <profile> -- <command>"
        exit 1
      fi
      local profile_name="$2"
      shift 3  # Remove 'exec', profile_name, and '--'
      exec_command "$profile_name" "$@"
      ;;
    "help"|"--help"|"-h")
      show_help
      ;;
    *)
      show_help
      ;;
  esac
}

# Initialize variables
CURRENT_PROFILE=""

# Run main function if script is executed directly (not sourced)
if [[ "${BASH_SOURCE[0]:-}" == "${0}" ]]; then
  main "$@"
else
  # When sourced, execute the command directly
  if [[ $# -gt 0 ]]; then
    main "$@"
  fi
fi